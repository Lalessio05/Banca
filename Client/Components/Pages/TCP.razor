@page "/"
@using System.Net.Sockets
@using System.Text.Json
@using System.Threading.Tasks
@using Newtonsoft.Json
@using Server;
@rendermode InteractiveServer

<h3>Test del server TCP</h3>

<p>Inserisci il PIN:</p>
<input @bind="pin" />

<p>Scegli un'operazione:</p>
<select @bind="selectedOperation">
    <option value="Prelievo">Prelievo</option>
    <option value="Deposito">Deposito</option>
    <option value="Estratto_Conto">Estratto Conto</option>
</select>

@if (selectedOperation == "Prelievo" || selectedOperation == "Deposito")
{
    <div>
        <p>Inserisci l'importo:</p>
        <input @bind="amount" type="number" />
    </div>
}
<p>Inserisci il numero di carta:</p>
<input @bind="numeroCarta" />


<button @onclick="SendRequest">Invia richiesta</button>

<p>@responseMessage</p>

@code {
    private string pin;
    private string numeroCarta;
    private string selectedOperation = "Prelievo";
    private int amount;
    private string responseMessage;

    private async Task SendRequest()
    {
        using (TcpClient client = new TcpClient())
        {
            try
            {
                await client.ConnectAsync("localhost", 9090);

                using (NetworkStream stream = client.GetStream())
                using (StreamWriter writer = new StreamWriter(stream))
                using (StreamReader reader = new StreamReader(stream))
                {
                    string requestData = JsonConvert.SerializeObject(
                        new
                        {
                            Nome = "Gianni",
                            Cognome = "Gambato",
                            NumeroCarta = numeroCarta,
                            PINBytes = Crypt.Encrypt(pin),
                            Amount = amount,
                            Operazione = Enum.Parse<Operazione>(selectedOperation),
                            DataTransazione = DateTime.Now,
                });

                    await writer.WriteLineAsync(requestData);
                    await writer.FlushAsync();
                    
                    string responseData = await reader.ReadLineAsync(); 
                    responseMessage = responseData;
                }
            }
            catch (Exception ex)
            {
                responseMessage = $"Errore: {ex.Message}";
            }
        }
    }
}
